name: frontend CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: install modules
        run: npm install

      - name: build project
        run: npm run build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # container:
    #   image: galimovn/test-app:latest
    #   credentials:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: setup git config
        run: |
          git config user.name "Github Actions Bot"
          git config user.email "<>"

      - name: Install Dependencies
        run: npm install --force

      # - name: Log in to Docker Hub
      #   run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: DockerHub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker Image
        run: docker build --tag test-app .

      - name: Tag image
        run: docker tag test-app ${{ secrets.DOCKERHUB_USERNAME }}/test-app:latest

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/test-app:latest

      - name: SSH to Droplet and Update Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          port: 22
          script: |
            docker stop test-app || true
            docker rm test-app || true
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/test-app:latest || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/test-app:latest
            docker run -d --name test-app -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/test-app:latest
